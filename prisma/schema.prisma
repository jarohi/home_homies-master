// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @map("_id")
  name           String?
  email          String?   @unique
  emailVerified  DateTime
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]

  accounts     Account[]
  listings        listing[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String?
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model listing {
  id                String   @id @default(uuid()) @map("_id")
  userId            String
  rent              Int?
  deposit           Int?
  brokerage         String?
  createdAt         DateTime? @default(now())
  availability      DateTime?
  bhk               Int?
  occupancy         String?
  available_for     String?
  furnishing_status String?
  property_type     String?
  location_area     String?
  contact_details   String?
  listing_url          String?
  images_url        String?
  original_listing     String?

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Reservation Reservation[]
}

model Reservation {
  id         String   @id @default(uuid()) @map("_id")
  userId     String
  listingId  String?
  startDate  DateTime?
  endDate    DateTime?
  totalPrice Int?
  createdAt  DateTime? @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}